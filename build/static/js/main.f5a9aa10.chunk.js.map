{"version":3,"sources":["TodoInput.js","TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","react_default","a","createElement","type","value","this","props","content","className","onChange","changeTitle","bind","onKeyPress","submit","e","key","console","log","Component","TodoItem","checked","todo","status","toggle","title","onClick","delete","onToggle","onDelete","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newTodo","todoList","id","_this2","todos","filter","item","deleted","map","index","TodoItem_TodoItem","TodoInput_TodoInput","onSubmit","addTodo","setState","event","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAGqBA,4MAEjB,OAAOC,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,MAAOC,KAAKC,MAAMC,QACzCC,UAAU,YACVC,SAAUJ,KAAKK,YAAYC,KAAKN,MAChCO,WAAYP,KAAKQ,OAAOF,KAAKN,uCAE3BS,GACS,UAAVA,EAAEC,KACJC,QAAQC,IAAI,4EAGJH,GACVT,KAAKC,MAAMG,SAASK,UAbeI,cCAlBC,0LAEjB,OACEnB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,YACbR,EAAAC,EAAAC,cAAA,SAAOC,KAAK,WAAWiB,QAAoC,cAA3Bf,KAAKC,MAAMe,KAAKC,OAC9Cb,SAAUJ,KAAKkB,OAAOZ,KAAKN,QAC7BL,EAAAC,EAAAC,cAAA,QAAMM,UAAU,SAASH,KAAKC,MAAMe,KAAKG,OACzCxB,EAAAC,EAAAC,cAAA,UAAQuB,QAASpB,KAAKqB,OAAOf,KAAKN,OAAlC,gDAICS,GACLT,KAAKC,MAAMqB,SAASb,EAAGT,KAAKC,MAAMe,qCAE7BP,GACLT,KAAKC,MAAMsB,SAASd,EAAGT,KAAKC,MAAMe,aAfAH,cC6DvBW,cAxDb,SAAAA,EAAYvB,GAAM,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA1B,KAAAwB,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA1B,KAAA0B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA9B,KAAMC,KACD8B,MAAQ,CACXC,QAAS,OACTC,SAAU,CACR,CAACC,GAAG,EAAGf,MAAM,kCACb,CAACe,GAAG,EAAGf,MAAM,oCANDM,wEAUT,IAAAU,EAAAnC,KAEHoC,EAAQpC,KAAK+B,MAAME,SACpBI,OAAO,SAACC,GAAD,OAAUA,EAAKC,UACtBC,IAAI,SAACF,EAAKG,GACX,OACE9C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC6C,EAAD,CAAU1B,KAAMsB,EAAMhB,SAAUa,EAAKjB,OAAOZ,KAAK6B,GAC/CZ,SAAUY,EAAKd,OAAOf,KAAK6B,QAKnC,OACExC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACXR,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBACbR,EAAAC,EAAAC,cAAC8C,EAAD,CAAWzC,QAASF,KAAK+B,MAAMC,QAC7B5B,SAAUJ,KAAKK,YAAYC,KAAKN,MAChC4C,SAAU5C,KAAK6C,QAAQvC,KAAKN,SAEhCL,EAAAC,EAAAC,cAAA,MAAIM,UAAU,YACXiC,mCAKJ3B,EAAGO,GACRA,EAAKC,OAAyB,cAAhBD,EAAKC,OAAyB,GAAK,YACjDjB,KAAK8C,SAAS9C,KAAK+B,2CAETgB,GACV/C,KAAK8C,SAAS,CACZd,QAASe,EAAMC,OAAOjD,MACtBkC,SAAUjC,KAAK+B,MAAME,6CAIvBtB,QAAQC,IAAI,mFAEPmC,EAAO/B,GACZA,EAAKuB,SAAU,EACfvC,KAAK8C,SAAS9C,KAAK+B,cArDLlB,aCKEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCMNC,IAASC,OACP5D,EAAAC,EAAAC,cAAC2D,EAAD,MACAC,SAASC,eAAe,SDuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f5a9aa10.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './TodoInput.css'\r\n\r\nexport default class TodoInput extends Component {\r\n  render(){\r\n    return <input type=\"text\" value={this.props.content}\r\n       className=\"TodoInput\"\r\n       onChange={this.changeTitle.bind(this)}\r\n       onKeyPress={this.submit.bind(this)}/>\r\n  }\r\n  submit(e){\r\n    if (e.key === 'Enter') {\r\n      console.log('用户按回车了');\r\n    }\r\n  }\r\n  changeTitle(e){\r\n    this.props.onChange(e)\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './TodoItem.css'\r\n\r\nexport default class TodoItem extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"TodoItem\">\r\n        <input type=\"checkbox\" checked={this.props.todo.status === 'completed'}\r\n          onChange={this.toggle.bind(this)}/> \r\n        <span className=\"title\">{this.props.todo.title}</span>\r\n        <button onClick={this.delete.bind(this)}>删除</button>\r\n      </div>\r\n    )\r\n  }\r\n  toggle(e){\r\n    this.props.onToggle(e, this.props.todo)\r\n  }\r\n  delete(e){\r\n    this.props.onDelete(e, this.props.todo)\r\n  }\r\n}","import React, { Component } from 'react';\nimport 'normalize.css'\nimport './reset.css'\nimport './App.css';\nimport TodoInput from './TodoInput'\nimport TodoItem from './TodoItem'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      newTodo: 'test',\n      todoList: [\n        {id:1, title:'第一个待办'},\n        {id:2, title:'第二个待办'},\n      ]\n    }\n  }\n  render() {\n\n    let todos = this.state.todoList\n      .filter((item)=> !item.deleted)\n      .map((item,index)=>{\n      return ( \n        <li>\n          <TodoItem todo={item} onToggle={this.toggle.bind(this)} \n            onDelete={this.delete.bind(this)}/>\n        </li>\n      )\n    })\n\n    return (\n      <div className=\"App\">\n          <h1>我的待办</h1>\n          <div className=\"inputWrapper\">\n            <TodoInput content={this.state.newTodo} \n              onChange={this.changeTitle.bind(this)}\n              onSubmit={this.addTodo.bind(this)} />\n          </div>\n          <ol className=\"todoList\">\n            {todos}\n          </ol>\n      </div>\n    )\n  }\n  toggle(e, todo){\n    todo.status = todo.status === 'completed' ? '' : 'completed'\n    this.setState(this.state) \n  }\n  changeTitle(event){\n    this.setState({\n      newTodo: event.target.value,\n      todoList: this.state.todoList\n    })\n  }\n  addTodo(){\n    console.log('我得添加一个 todo 了')\n  }\n  delete(event, todo){\n    todo.deleted = true\n    this.setState(this.state) \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\n// function tick() {\n//   const element = (\n//     <div>\n//       <h1>Hello, world!</h1>\n//     </div>\n//   );\n//   ReactDOM.render(\n//     element,\n//     document.getElementById('root')\n//   );\n// }\n\n// setInterval(tick, 1000);\n\n// ReactDOM.render(  \n//     <h1>Hi, world!</h1>,\n//     document.getElementById('root2')\n// );\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}